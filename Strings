{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/krishna1garikapati/Learning-Python/blob/main/Strings\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zwFnJsE6vjf8"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "source": [
        "#String comparision\n",
        "# comparision operators works for string\n",
        "word='Sum'\n",
        "if word=='banana':\n",
        "  print('Your word'+ word + 'is correct and match to banana')\n",
        "elif word>'banana':\n",
        "  print('Your word' + word + 'comes before banana')\n",
        "elif word<'banana':\n",
        "  print('Your word ' + word + ' comes after banana')\n"
      ],
      "metadata": {
        "id": "FG6eB6Avc6zb",
        "outputId": "73fa3d8e-a0fd-4aad-ab1c-5f30470ded04",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Your word Sum comes after banana\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#practicing 'in' operator in strings\n",
        "'ban' in 'banana'\n",
        "'nan' in 'banana'\n",
        "'see' in 'banana'"
      ],
      "metadata": {
        "id": "WGsvwf1qfLQY",
        "outputId": "dc9de4a1-c153-42f7-cb5d-54b8d88e523c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=['ban', 'nan', 'see']\n",
        "compare='banana'\n",
        "for i in a:\n",
        "  result=i in compare\n",
        "  print(result)\n"
      ],
      "metadata": {
        "id": "JoLkizeqhGLL",
        "outputId": "6005c287-6a80-4f58-a977-0ec0f1a3c71e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "True\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=['ban', 'nan', 'see']\n",
        "result=[]\n",
        "compare='banana'\n",
        "for i in a:\n",
        "  r=i in compare\n",
        "  result.append(r)\n",
        "print(result)\n",
        "\n",
        ""
      ],
      "metadata": {
        "id": "sR0ZBmdAiqdn",
        "outputId": "e02aab7d-a0d9-4990-b828-0ccad2c4081f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[True, True, False]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#count number of 'a' in banana\n",
        "#Topic: counting and looping\n",
        "word='banana'\n",
        "count=0\n",
        "for i in word:\n",
        "  if i=='a':\n",
        "    count=count+1\n",
        "print(count)"
      ],
      "metadata": {
        "id": "P3AtAfk8kWF7",
        "outputId": "c373389e-2e23-4319-911f-101b11cd30dc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#proving strings are immutable\n"
      ],
      "metadata": {
        "id": "k307tu4ElfiZ"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "name": "Welcome To Colaboratory",
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}